AWSTemplateFormatVersion: '2010-09-09'
Description: 'Elastic Beanstalk and Auto Scaling Challenge Template'

Parameters:
  VpcId:
    Description: 'The ID of the existing VPC where the resources will be created. Leave empty to create a new VPC.'
    Type: 'AWS::EC2::VPC::Id'
    Default: ''
  StackName:
    Description: 'A unique name for the CloudFormation stack.'
    Type: 'String'
    MinLength: '1'
    MaxLength: '255'
  InstanceType:
    Description: 'EC2 instance type for the Elastic Beanstalk environment'
    Type: 'String'
    Default: 't2.micro'
    AllowedValues:
      - 't2.micro'
      - 't2.small'
      - 't2.medium'
  AMIId:
    Description: 'The ID of the Amazon Machine Image (AMI) to use for EC2 instances.'
    Type: 'AWS::EC2::Image::Id'
    Default: 'ami-0bcc476f0af20424e'  # Default AMI ID
  SecurityGroup:
    Description: 'The name of the security group to associate with EC2 instances.'
    Type: 'String'
    Default: 'default'  # Default security group
  KeyPair:
    Description: 'The name of the key pair to use for EC2 instances.'
    Type: 'AWS::EC2::KeyPair::KeyName'
  ELBName:
    Description: 'Name for the Elastic Load Balancer.'
    Type: 'String'
  SolutionStackName:
    Description: 'Elastic Beanstalk solution stack name.'
    Type: 'String'
    Default: '64bit Amazon Linux 2 v5.8.6 running Node.js 18'
  Tags:
    Description: 'A comma-separated list of tags to apply to the resources created.'
    Type: 'String'
    Default: ''
  SubnetId1:
    Description: 'The ID of the first subnet for the Elastic Load Balancer. Leave empty to create a new subnet.'
    Type: 'AWS::EC2::Subnet::Id'
    Default: ''
  SubnetId2:
    Description: 'The ID of the second subnet for EC2 instances. Leave empty to create a new subnet.'
    Type: 'AWS::EC2::Subnet::Id'
    Default: ''
  ApplicationName:
    Description: 'Name of the Elastic Beanstalk application.'
    Type: 'String'
    Default: 'ecl3'  # Default application name

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Condition: CreateNewVPC
    Properties:
      CidrBlock: '10.0.0.0/16'

  Subnet1:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateNewSubnet1
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: 'us-east-1a'

  Subnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateNewSubnet2
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'us-east-1b'

  ElasticBeanstalkApplication:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      ApplicationName: !Ref ApplicationName

  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Listeners:
        -
          LoadBalancerPort: 80
          InstancePort: 80
          Protocol: 'HTTP'
      Subnets:
        - !If [CreateNewSubnet1, !Ref Subnet1, !Ref SubnetId1]
        - !If [CreateNewSubnet2, !Ref Subnet2, !Ref SubnetId2]
      LoadBalancerName: !Ref ELBName
      Tags:
        - Key: 'CustomTag'
          Value: 'CustomValue'

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref AMIId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      KeyName: !Ref KeyPair

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          Ref: 'AWS::Region'
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 2
      MaxSize: 4
      Tags:
        - Key: 'CustomTag'
          Value: 'YourAutoScalingGroup'
          PropagateAtLaunch: true
      MetricsCollection:
        -
          Granularity: '1Minute'
          Metrics:
            - 'GroupDesiredCapacity'
      Cooldown: 300 # 5 minutes
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 300 # 5 minutes

  ScaleOutPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: 'ChangeInCapacity'
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300 # 5 minutes
      ScalingAdjustment: 1

  ScaleInPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: 'ChangeInCapacity'
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 600 # 10 minutes
      ScalingAdjustment: -1

  CPUUtilizationAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Scale out when CPU exceeds 80% for 5 minutes'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/EC2'
      Statistic: 'Average'
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      AlarmActions:
        - !Ref ScaleOutPolicy
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      Dimensions:
        -
          Name: 'AutoScalingGroupName'
          Value: !Ref AutoScalingGroup

  CPUUtilizationAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Scale in when CPU is below 30% for 10 minutes'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/EC2'
      Statistic: 'Average'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 30
      AlarmActions:
        - !Ref ScaleInPolicy
      ComparisonOperator: 'LessThanOrEqualToThreshold'
      Dimensions:
        -
          Name: 'AutoScalingGroupName'
          Value: !Ref AutoScalingGroup

Conditions:
  CreateNewVPC: !Equals [!Ref VpcId, '']
  CreateNewSubnet1: !Equals [!Ref SubnetId1, '']
  CreateNewSubnet2: !Equals [!Ref SubnetId2, '']
